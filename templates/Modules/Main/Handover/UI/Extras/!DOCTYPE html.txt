<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Equipment Categories</title>
    <style>
        /* Basic styling for the buttons */
        .category-button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 5px;
        }
        .left-pane {
    width: 350px;
    height: 100%;
    background-color: #f0f0f0;
    padding: 10px;
    box-sizing: border-box;
    position: absolute; /* or position: fixed; */
    right: 0;
    top: 0;
}
table {
    border-collapse: collapse;
    font-size: 10px !important;
  }
  th, td {
    border: 1px solid black;
    padding: 8px;
    text-align: left;
    font-size: 10px !important;
  }
  th {
    font-size: 10px !important;
    background-color: lightgray;
  }


    </style>
</head>
<body>
<h2>Handover Form</h2>

<form id="handoverForm">

  <label>Handover Person Name:</label>
  <label>Loading Handover Person Name ....</label>
  <br><br>

    <label >Origin of Site:</label>
    <label> Loading Origin of Site ....</label>
    <br><br>


    <label for="receiverPersonName">Receiver Person Name:</label>
    <select id="receiverPersonName" name="receiverPersonName" required>
      <option value="">Select Receiver Person</option>
      <option value="Michael Brown">Michael Brown</option>
      <option value="Emily Davis">Emily Davis</option>
      <option value="Chris Wilson">Chris Wilson</option>
    </select><br><br>

    <label for="destinationSite">Destination Site:</label>
    <select id="destinationSite" name="destinationSite" required>
      <option value="">Select Destination Site</option>
      <option value="Site A">Site A</option>
      <option value="Site B">Site B</option>
      <option value="Site C">Site C</option>
    </select><br><br>

<div class="left-pane">

    <div class="electronics">
        <h1>Electronics</h1>
    </div>

    <div class="dgps_eq">
        <h1>DGPS Equipment</h1>
    </div>

    <div class="drone_eq">
        <h1>Drone Equipment</h1>
    </div>

</div>

<div class="table">
    <table id="mainTable">
        <th>Serial No</th>     
        <th>Product Name</th>
        <th>Product Make</th>
        <th>Model No</th> 
        <th>Product Serial</th>
        <th>Condition</th>
        <th>Status</th>
        <th>Remark</th>
</div>

</form>

<input type="button" value="Submit" id="submitButton">

<br>
<br>
<script>
    document.getElementById('submitButton').addEventListener('click', function() {
      var formData = new FormData(document.getElementById('handoverForm'));
      var xhr = new XMLHttpRequest();
      xhr.open('POST', '/submit_form', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.onload = function() {
        if (xhr.status === 200) {
          console.log('Form submitted successfully');
          // You can add further actions here if needed
        } else {
          console.log('Form submission failed');
          // Handle error
        }
      };
      xhr.onerror = function() {
        console.error('Request failed');
        // Handle error
      };
      xhr.send(JSON.stringify(Object.fromEntries(formData)));
    });
  </script>
  
</body>
<script>
    window.onload = function() {
        // Create a new XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Define the request URL
        var url = '/cart_items';

        // Set up the request
        xhr.open('GET', url, true);

        // Define the onload event handler
// Assuming this is where you receive the data from Flask
xhr.onload = function() {
    if (xhr.status >= 200 && xhr.status < 300) {
        // Parse the response data as JSON
        var responseData = JSON.parse(xhr.responseText);
        
        // Check if responseData has a 'data' property containing the array
        if (responseData.hasOwnProperty('data') && Array.isArray(responseData.data)) {
            // Call generateButtons with the array data
            generateButtons(responseData.data);
        } else {
            console.error('Invalid data format received from server:', responseData);
        }
    } else {
        console.error('Request failed with status:', xhr.status);
    }
};

        // Define the onerror event handler
        xhr.onerror = function() {
            console.error('Request failed:', xhr.statusText);
        };

        // Send the request
        xhr.send();
    };

    function generateButtons(data) {
    // Check if data is an array
    if (!Array.isArray(data)) {
        console.error('Data is not an array:', data);
        return;
    }

    data.forEach(item => {
    // Create a new button element
    var button = document.createElement('button');
    button.className = 'category-button';
    button.innerText = item['Product Name']; // Set the button text to the instrument name
    
            // Add click event listener to each button
            button.addEventListener('click', function() {
            populateTable(item);
            index = index+1
            button.disabled = true; // Disable the button when clicked
        });

    // Determine the category and append the button to the corresponding div
    switch (item.productCategory) {
        case 'Electronics':
            var electronicsDiv = document.querySelector('.electronics');
            if (electronicsDiv) {
                electronicsDiv.appendChild(button);
                electronicsDiv.appendChild(document.createElement('br')); // Add line break
            }
            break;
        case 'DGPS Equipment':
            var dgpsEqDiv = document.querySelector('.dgps_eq');
            if (dgpsEqDiv) {
                dgpsEqDiv.appendChild(button);
                dgpsEqDiv.appendChild(document.createElement('br')); // Add line break
            }
            break;
        case 'Drone Equipment':
            var droneEqDiv = document.querySelector('.drone_eq');
            if (droneEqDiv) {
                droneEqDiv.appendChild(button);
                droneEqDiv.appendChild(document.createElement('br')); // Add line break
            }
            break;
        default:
            break;
    }
});


}
var index = 0;
function populateTable(item) {
    var table = document.getElementById('mainTable');
    var newRow = table.insertRow(-1); // Insert new row at the end of the table

    // Insert cells with item data
    var serialNoCell = newRow.insertCell(0);
    var productNameCell = newRow.insertCell(1);
    var makeCell = newRow.insertCell(2);
    var modelCell = newRow.insertCell(3);
    var productSerialCell = newRow.insertCell(4);
    var conditionCell = newRow.insertCell(5);
    var statusCell = newRow.insertCell(6);
    var remarkCell = newRow.insertCell(7);

    
   // Set cell values
    serialNoCell.innerText = index + 1; // Serial number starts from 1
    productNameCell.innerText = item['Product Name'];
    makeCell.innerText = item['Make'];
    modelCell.innerText = item['Model'];
    productSerialCell.innerText = item['Product Serial'];

    // Create select dropdown for condition
    var conditionSelect = document.createElement('select');
    conditionSelect.className = 'Condition';
    conditionSelect.name = 'Condition';
    var options = ['Good', 'Bad', 'Worse'];
    options.forEach(option => {
        var optionElement = document.createElement('option');
        optionElement.value = option;
        optionElement.innerText = option;
        conditionSelect.appendChild(optionElement);
    });
    conditionCell.appendChild(conditionSelect);

    // Create checkboxes for status
    var statusCheckboxes = ['reached', 'frontend', 'backend', 'cleanup'];
    var statusLabel = document.createElement('label');

    statusCell.appendChild(statusLabel);

    statusCheckboxes.forEach(checkboxName => {
        var checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.name = checkboxName;
        var label = document.createElement('label');
        label.innerText = checkboxName.charAt(0).toUpperCase() + checkboxName.slice(1);
        statusCell.appendChild(checkbox);
        statusCell.appendChild(label);

    });

    // Create input field for remarks
    var remarksInput = document.createElement('input');
    remarksInput.type = 'text';
    remarksInput.className = 'remarks';
    remarksInput.name = 'remarks';
    remarksInput.size = '40';
    remarkCell.appendChild(remarksInput);
}


</script>


</body>
</html>

